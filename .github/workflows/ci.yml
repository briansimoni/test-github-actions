name: CI
run-name: ${{ github.actor }} is running the CI job
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      - name: tag a new version
        if: startsWith(github.ref, 'refs/tags/') == false
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
            current_version=$(gh api repos/:owner/:repo/tags | jq -r '.[0].name')

            # Parse the version components
            major=$(echo "$current_version" | cut -d. -f1)
            minor=$(echo "$current_version" | cut -d. -f2)
            patch=$(echo "$current_version" | cut -d. -f3)
            
            # Increment the patch version
            patch=$((patch + 1))
            
            # Create the new tag
            new_tag="$major.$minor.$patch"
            # Create a tag with GitHub CLI
            gh api repos/:owner/:repo/git/refs -f ref="refs/tags/$new_tag" -f sha=$(git rev-parse HEAD)
            # create a release
            # Create a release on GitHub
            # Create a release on GitHub and publish it
            gh release create "$new_tag" --title "Release $new_tag" --notes "Release notes here" --draft=false


